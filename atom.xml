<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://BolinWu-Gridea.github.io</id>
    <title>Bolin Wu</title>
    <updated>2021-05-22T09:41:30.330Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://BolinWu-Gridea.github.io"/>
    <link rel="self" href="https://BolinWu-Gridea.github.io/atom.xml"/>
    <subtitle>Data Science Blog
</subtitle>
    <logo>https://BolinWu-Gridea.github.io/images/avatar.png</logo>
    <icon>https://BolinWu-Gridea.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Bolin Wu</rights>
    <entry>
        <title type="html"><![CDATA[An Overview of Causal Inference (Part 1: Causal Effects and Confounding)]]></title>
        <id>https://BolinWu-Gridea.github.io/post/2021-04-20-CausalityIntroductionP1/</id>
        <link href="https://BolinWu-Gridea.github.io/post/2021-04-20-CausalityIntroductionP1/">
        </link>
        <updated>2021-04-19T10:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Causal inference has been a heated field in statistics. It has great application for observational data. In this post I will shares some key concepts of causal inference:</p>
<ul>
<li>The confusion over causal inference</li>
<li>The important causal assumptions</li>
<li>The concept of causal effects</li>
<li>Confounding and Directed Acyclic Graphs</li>
</ul>
<p>Main reference:</p>
<ul>
<li><a href="https://www.coursera.org/learn/crash-course-in-causality/home/welcome">A Crash Course in Causality: Inferring Causal Effects from Observational Data</a> from Coursera.</li>
</ul>
<h2 id="confusion-over-causality">Confusion over causality</h2>
<h3 id="spurious-correlation">Spurious correlation</h3>
<p>Causally unrelated variables might happen to be highly correlated with each other over some period of time. E.g. Divorce rate in Marine correlates with Percapita consumtion of margarine.</p>
<h3 id="anecdotes">Anecdotes</h3>
<p>Example: Bill Smith lived to be 105 years old. He said the secret to his longevity was eating one turnip a day.</p>
<ul>
<li>All we know is that Bill Smith lived to be 105 years old <strong>AND</strong> he ate one turnip a day.</li>
<li>We do not know if eating turnips <strong>contributed</strong> to his lifespan.</li>
<li>We do not know what would happen if other people adopted this habbit.</li>
</ul>
<h3 id="science-reporting">Science reporting</h3>
<p>Headlines often do not use the forms of the word cause, but do get interpreted causally.<br>
Example: Positive link between video games and acedemic performance, study suggests.</p>
<p>In reality, a lot of times how skeptically people view headlines depends on what their prior beliefs are. In causality analysis, we want to move away from that to a large degree. Instead, we want to look at the evidence as it is.</p>
<p>Some key points:</p>
<ol>
<li>What statistical methods did they use?</li>
<li>How was the study designed?</li>
<li>What assumptions did they made?</li>
</ol>
<h3 id="reverse-causality">Reverse causality</h3>
<p>Even if there is a causal relationship, sometimes the direction is unclear.<br>
Example: Urban green space and exercise. Does green space in urban environments cause people to exercise more? Or the fact that more people come to exercise causes the govenment to build more gree space?</p>
<h2 id="how-to-clear-up-confusion">How to clear up confusion?</h2>
<p>The dield of causal inference attempts to do this by proposing:</p>
<ul>
<li>Formal definitions of causal effects.</li>
<li>Assumptions necessary to identify causal effects from data.</li>
<li>Rules about what variables need to be controlled for.</li>
<li>Sensitivity analysis to determine the impact of violations of assumptions on conclusions.</li>
</ul>
<p>Statisticians started working on causal modeling as far back as the 1920s (Wright 1921; Neyman 1923)<br>
It became its own area of statistical research since around 1970s.<br>
<strong>Some highlights:</strong></p>
<ul>
<li>Re-introduction of potential outcomes: Rubin causal model (Rubin 1974).</li>
<li>Causal diagrams (Greenland and Robins 1986; Pearl 2000).</li>
<li>Propensity scores (Rosenbaum and Rubin 1983).</li>
<li>Time-dependent confounding (Robins 1986; Robins 1997).</li>
<li>Optimal dynamic treatment strategies (Murphy 2003; Robins 2004).</li>
<li>Target learning (vander Laan 2009).</li>
</ul>
<p>As we dive deeper into causal modeling, it will be important to remember:</p>
<ul>
<li>Causal inference requires making some untestable assumptions (reffered to as <em>causal assumptions</em>)</li>
<li>Cochran (1972) concludes:<br>
&quot;...observational studies are an interesting and challenging field which demands a <strong>good quality of humility</strong>, since we can claim only to be <strong>groping</strong> toward the truth.&quot;</li>
</ul>
<h2 id="treatment-potential-outcomes-and-counterfactuals">Treatment, potential outcomes and counterfactuals</h2>
<p>Here we will introduce some notations that is important for the following post.</p>
<p>Suppose we are interested in the causal effect of some <strong>treatment</strong> A on some outcome Y.<br>
treatment example: A = 1 if receive influenza vaccine; A = 0 otherwise. Here is a treatment that takes two values 1 or 0.<br>
Outcome example: Y = 1 if develop cardiovascular disease within 2 years; Y = 0 otherwise.</p>
<p>What is <strong>potential outcomes</strong>? You can think of it as the possible outcomes before the study takes place.</p>
<p>Notation: $$Y^{a}$$ is the outcome that would be observed if treatment was set to A = a.</p>
<p>What about <strong>counterfactuals</strong>? Counterfactual outcomes are ones that would have been ovserved had the treatment been different. For example: if my treatment wes A = 1, then my counterfactual outcome is $$Y^{0}$$.</p>
<h2 id="hypothetical-intervention">Hypothetical intervention</h2>
<p>One important assumption of causal effects of intervention is that the variables can be manipulated. Halland (1986) famously wrote &quot;no causation without manipulation&quot;&quot;. We can imagine that we can manupulate some people get drug A while others get drugs B.</p>
<p>However, it is less clear about what a causal effect of an immutable variable would mean e.g. gender, age, race. One way to approch this is to relate these varibales to the variables that we can manupulate.</p>
<table>
<thead>
<tr>
<th>No direct intervention</th>
<th>Manipulable intervention</th>
</tr>
</thead>
<tbody>
<tr>
<td>Race</td>
<td>Name on resume</td>
</tr>
<tr>
<td>Obesity</td>
<td>Bariatric surgery</td>
</tr>
<tr>
<td>Socioeconomic status</td>
<td>Gift of money</td>
</tr>
</tbody>
</table>
<p>For the remainder of the post, we will primarily focus on treaments that could be thought of as <strong>interventions</strong>. Treatments that we can imagine being randomized (manupulated) in a hypothetical trial. The reason that we focus on causal effect of hypothetical interventions is that</p>
<ol>
<li>Their meaning is well defined.</li>
<li>They are potentially actionable.</li>
</ol>
<h2 id="what-are-causal-effects">What are causal effects?</h2>
<p>In general: A had a <strong>causal effect</strong> on Y if $$Y^{1}$$ differs from $$Y^{0}$$.<br>
The <em>foundamental problem of causal inference</em> is that we can only observe one potential outcome for each person. However, with certain assumptions, we can estimate pupulation level (average) causal effects. That is, rather than think if the causal effect work for individual, we think of the population as a whole. Therefore we never know the unit level causal effect.</p>
<ul>
<li>Hopeless: What would have happened to me had I not taken ibuprofen? (unit elvel causal effect)</li>
<li>Possible: What would the rate of headache remission be if everyone took ibuprofen when they had a headache versus no one did?</li>
</ul>
<h3 id="average-ausal-effect">Average ausal Effect</h3>
<p>Definition: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>(</mo><msup><mi>Y</mi><mn>1</mn></msup><mo>−</mo><msup><mi>Y</mi><mn>0</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">E(Y^{1} - Y^{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.<br>
It means the average value of Y if everyone was treated with A = 1 minus the average value of Y if everyone was treated with A = 0, if Y is binary. Please note that this is just an ideal definition because we could never actually observe that in the real world.</p>
<h3 id="conditioning-on-vs-setting-treatment">Conditioning on, VS setting, treatment</h3>
<p>In general,</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>E</mi><mo>(</mo><msup><mi>Y</mi><mn>1</mn></msup><mo>−</mo><msup><mi>Y</mi><mn>0</mn></msup><mo>)</mo><mi mathvariant="normal">≠</mi><mi>E</mi><mo>(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo>=</mo><mn>1</mn><mo>)</mo><mo>−</mo><mi>E</mi><mo>(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo>=</mo><mn>0</mn><mo>)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
    E(Y^{1} - Y^{0}) \neq E(Y|A = 1) - E(Y|A = 0)
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.524108em;vertical-align:-0.512054em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.012054em;"><span style="top:-3.147946em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.512054em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>The reason is that $$E(Y^{1}$$ is the mean of Y if the whole population was treated with A = 1; while $$E(Y|A = 1)$$ is mean of Y among people with A = 1. Technically, $$E(Y|A = 1) - E(Y|A = 0)$$ is not a causal effect because it is comparing two different populations of people.</p>
<h3 id="other-causal-effects">Other causal effects</h3>
<p>Other causal effects that we may be interested in are:</p>
<ul>
<li>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;$&#039; in math mode at position 17: …(Y^{1} / Y^{0})$̲$ : causal rela…'>E(Y^{1} / Y^{0})$$ : causal relative risk
</p>
</li>
</ul>
<h3 id="challenge">Challenge</h3>
<ol>
<li>How do we use observed data to link observed outcomes to potential outcomes?</li>
<li>What assumptions are necessay to estimate causal effects from observed data?</li>
</ol>
<h2 id="causal-assumptions">Causal assumptions</h2>
<p>Identifiability of causal effects requires making some untestable assumptions. These are generally called causal assumptions.<br>
The most common are :</p>
<ul>
<li>Stable Unit Treatment Value Assumption (SUTVA)</li>
<li>Consistency</li>
<li>Ignorability</li>
<li>Positivity<br>
They are all about the observed data: Y, A and a set of pre-treatment covariates X.</li>
</ul>
<h3 id="sutva">SUTVA</h3>
<p>It involves two assumptions:</p>
<ol>
<li>No interference:
<ul>
<li>Unites do not interfere with each other</li>
<li>Treatment assigment of one unit does not affect that outcome of another unit.</li>
<li>&quot;Spoillover&quot; or &quot;contagion&quot; are also terms for interference.</li>
</ul>
</li>
<li>One version of treatment
<ul>
<li>The potential outcomes can effectively linked to the observed data.<br>
SUTVA allows us to write potential outcome for the ith person in terms of only that person's treatments.</li>
</ul>
</li>
</ol>
<h3 id="consistency-assumption">Consistency assumption</h3>
<p>The potential outcome under treatment A = a is equal to the observed outcome if the actual treatment received is A = a.</p>
<h3 id="ignorability-assumption">Ignorability assumption</h3>
<p>Given pre-treatment covariates X, treatment assignment is independent from the potential outcomes.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Y</mi><mn>0</mn></msup><mo separator="true">,</mo><msup><mi>Y</mi><mn>1</mn></msup><mo>∐</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>X</mi></mrow><annotation encoding="application/x-tex">Y^{0}, Y^{1} \coprod A|X
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∐</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></span></p>
<p>Essentially it means that the treatment A is randomly assigned regardless of X.</p>
<h3 id="positivity-assumtion">Positivity assumtion</h3>
<p>It refers to that everybody has a positive opportunity to receive either treatment.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>A</mi><mo>=</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo>=</mo><mi>x</mi><mo>)</mo><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mtext>for all a and x</mtext></mrow><annotation encoding="application/x-tex">P(A = a| X = x) &gt;0 , \text{for all a and x}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">for all a and x</span></span></span></span></span></span></p>
<p>If treatment was deterministic for some values of X, then we would have no ovserved values of Y for one of the treatment groups for thoses values of X.</p>
<h1 id="confounding-and-directed-acyclic-graphs-dags">Confounding and Directed Acyclic Graphs (DAGs)</h1>
<h2 id="confounding-control">Confounding control</h2>
<p>Confounders are often defined as variables that affect treatment and affect the outcome.</p>
<p>We are interested in identifying a set of variables X that will make the ignorability assumption hold. Then we want to use statistical methods, which will be covered later in the course, to control these variables and estimated causal effects.</p>
<h2 id="causal-graph">Causal graph</h2>
<p>Graphs (causal graphs or directed acyclic graphs) are considered useful for causal inference. The functions of causal graphs are:</p>
<ul>
<li>Helpful for identifying which variables to control for</li>
<li>Make assumptions eplicit.</li>
</ul>
<p>Here I would not explain all the details about DAGs, more information about compatibility between DAGs and distributions can be found <a href="https://www.stat.cmu.edu/~cshalizi/uADA/12/lectures/ch22.pdf">here</a>.</p>
<p>Instead, I would like to note down some interesting facts when learning DAGs path and associations.</p>
<ol>
<li>For a fork path $$A &lt;-E-&gt; B$$, A and B are dependent because the information from E flows to both A and B.</li>
<li>For colliders $$A-&gt;G&lt;-B$$, A and B are independent. However, if we control forff G, then A and B are dependent.</li>
</ol>
<h1 id="ending">Ending</h1>
<p>Now we have an overview of the causal effects and we know that DAGs is an important method to identify the variables need to be controlled in order to achieve ignorability assumption. Next we will proceed to see how to <strong>control</strong> the counfounders. The two of the general approaches are <em>matching</em> and <em>inverse probability of treatment weighting</em>.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[test]]></title>
        <id>https://BolinWu-Gridea.github.io/post/test/</id>
        <link href="https://BolinWu-Gridea.github.io/post/test/">
        </link>
        <updated>2021-02-26T08:27:36.000Z</updated>
        <content type="html"><![CDATA[<p>test</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Classification of Baseball Player Technical Statistics by Decision Tree and Random Forest]]></title>
        <id>https://BolinWu-Gridea.github.io/post/2020-02-18-DecisionTree/</id>
        <link href="https://BolinWu-Gridea.github.io/post/2020-02-18-DecisionTree/">
        </link>
        <updated>2021-02-08T19:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Tree-based methods are conceptually easy to comprehend and they render advantages like easy visualization and data-preprocessing. It is a powerful tool for classification. In this post I will introduce how to classify baseball player technical statistics by  Decision Tree and Random Forest from algorithm coding to  package usage.</p>
<h2 id="content">Content:</h2>
<ol>
<li>Showing the algorithm of Decision Tree by R, which including tree splitting, tree grwoing, bagging, prediction, etc.</li>
<li>Runing Random Forest and XGBoost with the help of <strong>randomForest</strong> package</li>
</ol>
<h2 id="reference">Reference:</h2>
<ul>
<li><a href="https://web.stanford.edu/~hastie/ElemStatLearn/">The Elements of Statistical Learning: Data Mining, Inference, and Prediction</a>  by Trevor Hastie et al.</li>
<li>Mans Magnusson (2020). uuml: R Content for the Introduction to Machine Learning. Course at Uppsala University. R package version 0.2.0.</li>
</ul>
<h1 id="decision-tree">Decision Tree</h1>
<h2 id="data-pre-processing">Data Pre-processing</h2>
<p>First, we need to lead the dataset Hitters provided in the refereced <a href="https://github.com/MansMeg/IntroML/tree/master/rpackage">uuml</a> package. This dataset consists of the salary of many baseball players and their relevant technical statistics. <br>
Here we assume that we only care about three columns:&quot;Years&quot;, &quot;Hits&quot; and &quot;Salary&quot;. The missing values are imputed by listwise deletion. And we set the first 30 ovservations as test set and the rest as training set.</p>
<pre><code class="language-r"># install relevant packages
# remotes::install_github(&quot;MansMeg/IntroML&quot;,subdir = &quot;rpackage&quot;)
# install.packages(&quot;randomForest&quot;)
# install.packages(&quot;xgboost&quot;)

# loead the packages                     
library(xgboost)
library(randomForest)
# load the data
library(uuml)
data(&quot;Hitters&quot;)
# In the task we only care about three columns:&quot;Years&quot;, &quot;Hits&quot; and &quot;Salary&quot;
# and we need to excluede the NA values
# So we need to pre-process the data
Hitters = Hitters[,c(&quot;Years&quot;, &quot;Hits&quot;,&quot;Salary&quot;)]

# get rid of NA
Hitters &lt;- Hitters[complete.cases(Hitters),]

# set aside test set and training set
X_test &lt;- Hitters[1:30, c(&quot;Years&quot;, &quot;Hits&quot;)]
y_test &lt;- Hitters[1:30, c(&quot;Salary&quot;)]
X_train &lt;- Hitters[31:nrow(Hitters), c(&quot;Years&quot;, &quot;Hits&quot;)]
y_train &lt;- Hitters[31:nrow(Hitters), c(&quot;Salary&quot;)]

</code></pre>
<h2 id="tree-splitting">Tree Splitting</h2>
<p>Now let us see how to do the first split. Please note that here does not involve tree growing.</p>
<h3 id="concept">Concept</h3>
<p>The alforithm we will use is from the referenced book <em>The Elements of Statistical Learning: Data Mining, Inference, and Prediction</em> (ESL), P307. We are seeking to splitting variable j and split point s that meet:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>m</mi><mi>i</mi><msub><mi>n</mi><mrow><mi>j</mi><mo separator="true">,</mo><mi>s</mi></mrow></msub><mo>[</mo><mi>m</mi><mi>i</mi><msub><mi>n</mi><mrow><mi>c</mi><mn>1</mn></mrow></msub><munder><mo>∑</mo><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><msub><mi>R</mi><mn>1</mn></msub><mo>(</mo><mi>j</mi><mo separator="true">,</mo><mi>s</mi><mo>)</mo></mrow></munder><mo>(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>c</mi><mn>1</mn></msub><msup><mo>)</mo><mn>2</mn></msup><mo>+</mo><mi>m</mi><mi>i</mi><msub><mi>n</mi><msub><mi>c</mi><mn>2</mn></msub></msub><munder><mo>∑</mo><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><msub><mi>R</mi><mn>2</mn></msub><mo>(</mo><mi>j</mi><mo separator="true">,</mo><mi>s</mi><mo>)</mo></mrow></munder><mo>(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>c</mi><mn>2</mn></msub><msup><mo>)</mo><mn>2</mn></msup><mo>]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
min_{j,s} [min_{c1} \sum_{x_{i}\in R_{1}(j,s)}(y_{i} - c_{1})^{2} + min_{c_{2}} \sum_{x_{i} \in R_{2}(j,s)}(y_{i} - c_{2})^{2} ]
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.86601em;vertical-align:-1.183005em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.683005em;"><span style="top:-3.683005em;"><span class="pstrut" style="height:3.050005em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.808995em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.00773em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">s</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516005em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.808995em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.00773em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">s</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516005em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.183005em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>Where the inner minimization with regard to j and s is solved by :</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mover accent="true"><msub><mi>c</mi><mn>1</mn></msub><mo>^</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>(</mo><msub><mi>y</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><msub><mi>R</mi><mn>1</mn></msub><mo>(</mo><mi>j</mi><mo separator="true">,</mo><mi>s</mi><mo>)</mo><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mover accent="true"><msub><mi>c</mi><mn>2</mn></msub><mo>^</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>v</mi><mi>e</mi><mo>(</mo><msub><mi>y</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><msub><mi>R</mi><mn>2</mn></msub><mo>(</mo><mi>j</mi><mo separator="true">,</mo><mi>s</mi><mo>)</mo><mo>)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
\hat{c_{1}} &amp;= ave (y_{i}| x_{i} \in R_{1} (j,s)) \\
\hat{c_{2}} &amp;= ave (y_{i}| x_{i} \in R_{2} (j,s))
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>By first glance, you may get confused by what do those equations mean. Let us use a part of the data to make an illustration:</p>
<pre><code class="language-r"># use a size of 20
X_check &lt;- Hitters[31:50, c(&quot;Years&quot;, &quot;Hits&quot;)]
y_check &lt;- Hitters[31:50, c(&quot;Salary&quot;)]

head(X_check)

##           Years   Hits
## -Bob Melvin	2	60
## -BillyJo Robidoux	2	41
## -Bill Schroeder	4	46
## -Chris Bando	6	68
## -Chris Brown	3	132
## -Carmen Castillo	5	57

</code></pre>
<p>Essentially, what they do can be explained by the following three steps:</p>
<ol>
<li>Let j grind over all the variables of the dataset, which in our case is 2 variables <strong>Years</strong> and <strong>Hits</strong>. Let s grind over all the values of jth variable. For example, given the sample data above when j = 1 (Years), s will grind from year = 2 (Bob Melvin) to the year of last player.</li>
<li>Allocate each observation according to the given j and s into two groups. And then calculate the mean value of each group, $$\hat{c_{1}}$$ and $$\hat{c_{2}}$$. Get the within group scatters by using the function in the min() of the first equation above.</li>
<li>Return the j and s that give the smallest within group scatter.</li>
</ol>
<p>This process can be also called <strong>greedy method</strong>, because we are grinding all the possible values and return the most ideal result.</p>
<h3 id="code">Code</h3>
<p>To illustrate with R code, we will implement a function that takes data set X, the label y, and a minimal leaf size l. This function will give four outputs: The region that each observation belongs to (R1 and R2), splitting variable j and splitting point s.</p>
<pre><code class="language-r">tree_split = function(X,y,l){
  # store the split point
  S = matrix(NA,nrow = nrow(X), ncol = ncol(X))
  # store the sum of square
  SS = matrix(NA,nrow = nrow(X), ncol = ncol(X))
  for (j in 1:ncol(X)) {
    for (k in 1:nrow(X)) {
      # use the data point as split point
      s = X[k,j]
      # get the size in each leaf
      R1_size = length(  which(X[,j] &lt; s) )
      R2_size = length(  which(X[,j] &gt;= s) )
      # proceed if the size of leaf is bigger than the minimum l
      if (R1_size &gt;= l &amp; R2_size &gt;=l) {
        # 2.1.3
         c1 = mean( y[which(X[,j] &lt; s)] )
         # 2.1.4
         c2 = mean( y[which(X[,j] &gt;= s)] )
         # 2.1.5
         SS[k,j] =  sum( (y[which(X[,j] &lt; s)] - c1)^2 ) +
           sum((y[which(X[,j] &gt;= s)] - c2)^2)
      } else{
        # if the leaf is smaller than the minimum, then set to inf
        SS[k,j] = Inf
      }
      S[k,j] = s
    }
  }
  # find the index of Matix with smallest value
  j = which(SS == min(SS), arr.ind = TRUE)[1,2];
  s = X[which(SS == min(SS), arr.ind = TRUE)[1,1],j];
  R1 = which(X[,j] &lt; s);
  R2 = which(X[,j] &gt;= s)
  return(list(j = j,
               s = s,
               R1 = R1,
               R2 = R2
              , SS = min(SS)
              )
              )
  }

</code></pre>
<p>Then check with the sample data, assuming the minimal leaf size to be 5:</p>
<pre><code class="language-r">
tree_split(X_check, y_check, l = 5)

$j
col
  1

$s
[1] 6

$R1
 [1]  1  2  3  5  6  9 13 16 18 19

$R2
 [1]  4  7  8 10 11 12 14 15 17 20

$SS
[1] 1346633

</code></pre>
<p>The results seem to be reasonable. What about the first split for the whole training data?</p>
<pre><code class="language-r">tree_split(X_train , y_train , l = 5 )

$j
col
  1

$s
[1] 5

$R1
 [1]   1   2   3   5   9  13  16  18  19  21  22
[12]  28  30  36  38  40  41  42  45  51  55  57
[23]  73  75  78  79  80  88  89  94  96  99 100
[34] 102 104 107 113 114 118 119 121 128 130 133
[45] 134 138 139 141 142 143 145 146 147 149 151
[56] 152 155 157 167 178 180 183 184 185 187 191
[67] 192 193 194 197 198 199 204 206 210 211 216
[78] 220 222 227 228

$R2
  [1]   4   6   7   8  10  11  12  14  15  17  20
 [12]  23  24  25  26  27  29  31  32  33  34  35
 [23]  37  39  43  44  46  47  48  49  50  52  53
 [34]  54  56  58  59  60  61  62  63  64  65  66
 [45]  67  68  69  70  71  72  74  76  77  81  82
 [56]  83  84  85  86  87  90  91  92  93  95  97
 [67]  98 101 103 105 106 108 109 110 111 112 115
 [78] 116 117 120 122 123 124 125 126 127 129 131
 [89] 132 135 136 137 140 144 148 150 153 154 156
[100] 158 159 160 161 162 163 164 165 166 168 169
[111] 170 171 172 173 174 175 176 177 179 181 182
[122] 186 188 189 190 195 196 200 201 202 203 205
[133] 207 208 209 212 213 214 215 217 218 219 221
[144] 223 224 225 226 229 230 231 232 233

$SS
[1] 38464163


</code></pre>
<p>The fist split variate is j =1, which is year. The value is 5. If year is smaller than 5, then the observations go to R1, otherwise go to R2.</p>
<h2 id="tree-growing">Tree Growing</h2>
<p>In this part, I will first show the code and then illustrate it.</p>
<h3 id="code-2">Code</h3>
<p>Conceptually, tree growing is easy to understand: we looping pre-defined tree splitting until the generated leaves are so small that can not be further splitted (leaf size &lt; 2l). <br>
However, it is a bit difficult to implement tree growing by coding. Here I will make a function that takes same X,y, and l. It returns a data frame including j, s, gamma, R1_i and R2_i. Gamma is a metric of within group scatter. The R1_i and R2_i indicates which row of data frame to go next.</p>
<pre><code class="language-r">max_num_leaf = 7
#this does not affact the output, just set the max depth of the tree, the redundant part will show NA
grow_tree = function(X,y,l){
  # make the matrix to store the data
  S = matrix(NA,nrow = max_num_leaf, ncol = nrow(X))
  j = matrix(NA,nrow = max_num_leaf, ncol = 1)
  s = matrix(NA,nrow = max_num_leaf, ncol = 1)
  gamma_m = matrix(NA,nrow = max_num_leaf, ncol = 1)
  R1_i = rep(NA, length = max_num_leaf);
  R2_i = rep(NA, length = max_num_leaf)
  # the initial value
  S[1,] = c(1 : nrow(X))
  M = 1
  m = 1

  while (m &lt;= M ) {
      # loop until the size is too small to be splitted
     if ( length(S[m,][!is.na(S[m,])])&gt;= (2*l) ){
         # given a specific m:
         # get leaf size after split
       len_col = length((tree_split(X[S[m,],], y[S[m,]], l = l)$R1))
       S[M+1,1:len_col ] = tree_split(X[S[m,],], y[S[m,]], l = l)$R1
       len_col = length((tree_split(X[S[m,],], y[S[m,]], l = l)$R2))
       S[M+2,1:len_col] = tree_split(X[S[m,],], y[S[m,]], l = l)$R2
          # get the split variable and point
       j[m] = tree_split(X[S[m,],], y[S[m,]], l = l)$j
       s[m] = tree_split(X[S[m,],], y[S[m,]], l = l)$s
          # move on
       R1_i[m] = M+1 ; R2_i[m] = M + 2
       M = M +2
     } else {
         # when the size is too small, just return gamma, stop increasing M
       gamma_m [m]= mean( y[S[m,]], na.rm = T )
     }
    m = m + 1

  }
  return(data.frame( j = j, s = s , R1_i=R1_i, R2_i = R2_i, gamma = gamma_m ))
}

</code></pre>
<h3 id="explanation">Explanation</h3>
<p>Here my code may seem a bit too much. I believe that different people will have different approaches to build the algorithm and if you who are reading this post have a neater way please let me know, thank you 😃 <br>
Instead of explaining the my code line by line, I would like to explain the general concept with the help of my scrach. Sorry if it is a bit ugly.</p>
<figure>
  <img src="{{ site.url }}{{ site.baseurl }}/images/DecisionTreeFig/ugly_illustration.jpeg" alt="none" style="width:100%">
  <figcaption> An ugly scratch </figcaption>
</figure>
<p>The key is to use m (green) and M (yellow). The m denotes the index of splitted leaves, the M denotes the total number of leaves given an iteration. Therefore, as long as when the size of leaf m is bigger than 2l, m increases by 1 step while M goes by 2 steps per iteration (since there are two new leaves after each split). <br>
It is kind of like m is chasing M, and M stops when leaves stop growing and m stops when it catches M. Every time when m goes one step, it activates tree splitting function and gathers useful infomation.</p>
<p>Let us try out with the sample data:</p>
<pre><code class="language-r">tr = grow_tree(X_check,y_check,l = 5)
tr

## j   s  R1_i R2_i gamma
## 1	6	2	3	 NA
## 1	4	4	5	 NA
## 2	102	6	7	 NA
## NA	NA	NA	NA	 317
## NA	NA	NA	NA	 496
## NA	NA	NA	NA	 274
## NA	NA	NA	NA	 539

</code></pre>
<p>This data frame can be regarded as a &quot;map&quot;. For example, for observation <strong>Bob Melvin; year = 2 hits = 60</strong>, firstly since year&lt;6, it follows R2_i = 3, going to 3rd row of the data frame. Secondly, since hits&lt;102, it follows R2_i = 7, going to the 7th row. Thirdly, since there are only NA for indicating next step, the 7th row is its destination.</p>
<h2 id="prediction">Prediction</h2>
<p>Finally, we are at an exciting part, predicing a new observation given our pre-trained decision tree!</p>
<p>The basic idea of prediction is following the output dataframe of the tr. As is mentioned above, R1_i and R2_i indicates the row of the dataframe to go next like a map. It is stopped until the row shows up NA for the first 4 columns.</p>
<p>This function is to predict the classification gamma of new observations.</p>
<pre><code class="language-r">predict_with_tree = function(newdata, tree){

 pred = matrix(NA,nrow =1 , ncol = ncol(newdata))
 for (i in 1: nrow(newdata)) {
   # start with m =1, the first row
   m =1 ; s = tree[m,2] ; j = tree[m,1]
   while (!is.na(tree[m,1])) {
     if (newdata[i,j] &lt;s) { # follow R1_i
       m = tree[m,3];s = tree[m,2] ; j = tree[m,1]

     }else{# follow R2_i
       m = tree[m,4];s = tree[m,2] ; j = tree[m,1]
     }
     pred[i] = tree[m,5]
   }
 }
 return(pred)
}

</code></pre>
<p>Let us pre:</p>
<pre><code class="language-r">X_new &lt;- Hitters[51:52, c(&quot;Years&quot;, &quot;Hits&quot;)]
y_new &lt;- Hitters[51:52, c(&quot;Salary&quot;)]
predict_with_tree(newdata = X_new, tree = tr)

##     [,1] [,2]
## [1,]  317  496
</code></pre>
<p>The gamma of first observation is 317 and the second is 396.</p>
<p>What is the mean square error on the test set for a tree trained on the whole training data?</p>
<pre><code class="language-r"># set a large maximum tree depth
max_num_leaf = 50

# since we have more observations than the check data
# set the minimum leaf size = 10
tr = grow_tree(X_train,y_train,l = 10)
pred_tr = predict_with_tree(newdata = X_test, tree = tr)

MSE = mean((pred_tr - y_test) ^2 )
cat(&quot;MSE =&quot;,MSE)

## MSE = 78395.21
</code></pre>
<h1 id="bagging">Bagging</h1>
<h2 id="concept-2">Concept</h2>
<p>The basic idea of bagged tree regression is that we draw with replacement a random sample of N units from the original sample and fit a prediction, then we repeat it B times. In the end we weigh together the B predictions and derive the final prediction. The picture on P285, ESL tells us that as the number of Bootstrap samples goes greater, the test error goes smaller then it tends to be a constant which is smaller than the original tree.</p>
<figure>
  <img src="{{ site.url }}{{ site.baseurl }}/images/DecisionTreeFig/P285_BagComparison.jpg" alt="none" style="width:100%">
  <figcaption> Figure from P285, ESL </figcaption>
</figure>
<h2 id="code-3">Code</h2>
<pre><code class="language-r">bagged_tree = function(Xtrain, Ytrain, l, B,Xtest){
  sizeN = nrow(Xtrain)
  # store the predictions
  bagged_pred = matrix(NA, nrow = B, ncol = nrow(Xtest))
  for (i in (1:B)) {
    # bootstrap sample
    random_draw = sample( c(1:sizeN ), size = sizeN ,replace = T )
    bagged_tr = grow_tree(Xtrain[random_draw,],Ytrain[random_draw],l)
    bagged_pred_tr = predict_with_tree(newdata = Xtest, tree = bagged_tr)
    bagged_pred[i,] = bagged_pred_tr
    i = i + 1
  }
  # the final prediction is the mean of the B trees prediction
  return(colMeans(bagged_pred) )
}

</code></pre>
<p>Let us see if the B goes bigger, will RMSE goes smaller:</p>
<pre><code class="language-r">
set.seed(100)
cat(&quot;B = 10, bagged tree RMSE = &quot;,sqrt (mean(( bagged_tree(X_train,y_train,l = 10,
                                               B=10,Xtest = X_test) - y_test) ^2 ) ), &quot;\n&quot;,
    &quot;B = 20, bagged tree  RMSE = &quot;,sqrt (mean(( bagged_tree(X_train,y_train,l = 10,
                                               B=20,Xtest = X_test) - y_test) ^2 ) ), &quot;\n&quot;,
    &quot;B = 30, bagged tree  RMSE = &quot;,sqrt (mean(( bagged_tree(X_train,y_train,l = 10,
                                               B=30,Xtest = X_test) - y_test) ^2 ) ), &quot;\n&quot;
    )

## B = 10, bagged tree RMSE =  312.8866
##  B = 20, bagged tree  RMSE =  309.4088
##  B = 30, bagged tree  RMSE =  295.2994
</code></pre>
<p>The RMSE goes smaller indeed.</p>
<h1 id="random-forest-and-boosting">Random Forest and Boosting</h1>
<h2 id="concept-3">Concept</h2>
<p>The idea of random forest is very similar to bagged tree model. There is only one difference that in bagged tree model, all the features in the bootstrap samples are used. But in the random forest only random subset (without replacement) of features are chosen. The random forest is supposed to give a better performance if the trees are highly correlated. <br>
The intuition of boosting is that the training of latter tree is learning from the misclassification of the previous tree. So that the next trained tree is better than the previous tree.</p>
<p>For this part, we just need to fit the data into randomForest() function. ntree controls the number of bootstrap samples. To make it comparable, I also set ntree to be 10 which is the same as the previous bagged tree regression.</p>
<h2 id="code-4">Code</h2>
<pre><code class="language-r">train_df = Hitters[31:nrow(Hitters),]

rf_mod = randomForest(Salary~ . , data = train_df, ntree = 10)
rf_mod

##
## Call:
##  randomForest(formula = Salary ~ ., data = train_df, ntree = 10)
##                Type of random forest: regression
##                      Number of trees: 10
## No. of variables tried at each split: 1
##
##           Mean of squared residuals: 182725.5
##                     % Var explained: 15.89
</code></pre>
<p>The variable that are used is only 1. I suppose the reason is that there are only 2 variables in the X train data. According to the rule of thumb, the number of splitted variable is K/3 for regression model. In our case it is 2/3, which is rounded to be 1.</p>
<p>Now we can feed the randomForest function with xtest and ytest so that we can get the MSE of the test set.</p>
<pre><code class="language-r">set.seed(100)
rf_mod = randomForest(Salary~ . , data = train_df,xtest = X_test ,ytest = y_test, ntree = 10)
rf_mod

## Call:
## randomForest(formula = Salary ~ ., data = train_df, xtest = X_test,      ytest = y_test, ntree = 10)
##               Type of random forest: regression
##                     Number of trees: 10
## No. of variables tried at each split: 1
##
##          Mean of squared residuals: 193201.2
##                    % Var explained: 11.06
##                       Test set MSE: 67380.79
##                    % Var explained: 24.66



cat(&quot;random forest RMSE of test set =&quot;, sqrt(67380.79))

## random forest RMSE of test set = 259.5781
</code></pre>
<p>After reading the XG boosting documentation, I assume the parameter nrounds control the number of the tree therefore I set it to be 10 to make it comparable with the previous results.</p>
<pre><code class="language-r">xgb = xgboost(data = data.matrix(X_train), label = y_train,
              max.depth =5, eta = 1,
              nthread = 2, nrounds =10
       )

</code></pre>
<p>And the RMSE of the predictions can be calculated as follows:</p>
<pre><code class="language-r">
y_pred &lt;- predict(xgb, data.matrix(X_test))

cat(&quot;RMSE of xgboost = &quot;, sqrt(mean((y_pred - y_test)^2)) )
## RMSE of xgboost =  285.6745
</code></pre>
<p>The RMSE is bigger than the random forest model. It could be the reason that the sample size is not big enough or I did the tune the prameters in the function well. <br>
However, it is better than the bagged tree model.</p>
<h1 id="ending">Ending</h1>
<h2 id="challenges">Challenges</h2>
<p>Conceptually, tree based methods are not difficult to understand. However, depending on your background, it might be difficult to implement them by plain coding. For example when I was coding the tree growing algorithm, I was struggled with grasping m and M. And also it is easy to code the tree growing process when depth = 2 or 3 but it could be hard to generalize it. It requires a good understanding of looping. <br>
Nevertheless, the struggling process does help me to understand the algorithm better. I would encourage the reader to get your hand dirty by starting from scratch despite the fact that there are packages which can make it work easily.</p>
<h2 id="tips">Tips</h2>
<ul>
<li>The graphic illustration of how tree-based methods partitioning feature into a set of rectangles is pretty good. Please check out on <a href="https://web.stanford.edu/~hastie/ElemStatLearn/">ESL</a> P306.</li>
</ul>
]]></content>
    </entry>
</feed>